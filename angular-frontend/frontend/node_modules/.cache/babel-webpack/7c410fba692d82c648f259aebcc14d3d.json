{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as Notifications from 'src/app/interfaces/globalNotifications/notifications';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../user/user-service.service\";\nimport * as i3 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, userService, router) {\n      this.http = http;\n      this.userService = userService;\n      this.router = router;\n      this.apiServerUrl = environment.apiBaseUrl;\n    }\n\n    setSession(username, password) {\n      this.loginUser(username, password).subscribe(response => {\n        this.token = response;\n        localStorage.setItem('access_token', this.token.access_token);\n        localStorage.setItem('refresh_token', this.token.refresh_token);\n        localStorage.setItem('access_token_expires', this.token.access_token_expires);\n        localStorage.setItem('refresh_token_expires', this.token.refresh_token_expires);\n        localStorage.setItem('username', this.token.username); //alert(this.token.access_token+\"\\n username: \"+this.token.username);\n\n        this.userService.getUserByName(this.token.username).subscribe(response => {\n          if (response.id) localStorage.setItem(\"user_id\", response.id.toString());\n          console.warn(\"user ID: \" + response.id);\n          Notifications.addNewAlert(`You are now logged in as ${response.userName}`, \"success\");\n          this.router.navigateByUrl(\"dashboard\");\n        }, error => {\n          alert(error.message);\n        });\n      }, error => {\n        console.warn(error.message);\n        alert(\"User Not Found\");\n      });\n    }\n\n    refreshToken(refreshToken) {\n      return this.http.get(`${this.apiServerUrl}/api/token/refresh`);\n    }\n\n    loginUser(username, password) {\n      //alert(username+\"   \"+password)\n      let params = new HttpParams().set(\"username\", username).set(\"password\", password);\n      return this.http.get(`${this.apiServerUrl}/api/login`, {\n        params: params\n      });\n    }\n\n    registerUser(newUser) {\n      let header = new HttpHeaders().set('content-type', 'application/json');\n      let body = JSON.stringify(newUser);\n      return this.http.post(`${this.apiServerUrl}/api/register`, body, {\n        headers: header\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserServiceService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}