{"ast":null,"code":"import { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(datepipe, authService, injector, router) {\n      this.datepipe = datepipe;\n      this.authService = authService;\n      this.injector = injector;\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      const accessToken = localStorage.getItem('access_token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      const accessTokenExpiry = localStorage.getItem(\"access_token_expires\");\n      const refreshTokenExpiry = localStorage.getItem(\"refresh_token_expires\");\n      let accessTokenExpiryDate = this.datepipe.transform(accessTokenExpiry, 'MM/dd/yyyy HH:mm:ss');\n      let refreshTokenExpiryDate = this.datepipe.transform(refreshTokenExpiry, 'MM/dd/yyyy HH:mm:ss');\n      let dateNow = this.datepipe.transform(Date.now(), 'MM/dd/yyyy HH:mm:ss');\n      console.warn(\"Following access token found: \\n \\n\" + accessToken);\n      console.warn(\"@auth-interceptor Access_token expires at: \" + accessTokenExpiryDate);\n      console.warn(\"@auth-interceptor Refresh_token expires at: \" + refreshTokenExpiryDate);\n      console.warn(\"@auth-interceptor Day right now: \" + dateNow);\n      console.warn(\"REQUEST BODY IS: \\n\" + req.body);\n\n      if (accessToken !== null) {\n        console.warn(\"Incoming url in @auth-interceptor: \" + req.urlWithParams);\n\n        if (accessTokenExpiryDate !== null && dateNow !== null && dateNow < accessTokenExpiryDate && req.url !== 'http://localhost:8080/api/token/refresh') {\n          const cloned = req.clone({\n            headers: req.headers.set('Authorization', 'Bearer ' + accessToken)\n          });\n          return next.handle(cloned);\n          /*.pipe(map((event: HttpEvent<any>) => {\n          if (event instanceof HttpResponse) {\n          let body = JSON.parse(JSON.stringify(event)).body;\n          if(body.error_message){\n          console.warn(\"access token expired\")\n                     }\n          //event = event.clone({body: this.modifyBody(event.body)});\n          }\n          return event;\n          }));*/\n          //<<<<<<<<<<<<<<<<<<<<<<<<< Code in case I also want to handle the response\n          //if its refresh token path\n        } else if (req.url === 'http://localhost:8080/api/token/refresh') {\n          console.warn(\"refresh token path detected @auth-interceptor\");\n          const cloned = req.clone({\n            headers: req.headers.set('Authorization', 'Bearer ' + refreshToken)\n          });\n          return next.handle(cloned);\n        } else {\n          //if token expired, get new token and then process request else if both tokens expired, reroute to login         \n          if (refreshToken !== null && refreshTokenExpiryDate !== null && dateNow !== null && dateNow < refreshTokenExpiryDate) {\n            return this.authService.refreshToken(refreshToken).pipe(switchMap(response => {\n              console.warn(\"In the {getting new access token using refresh token} process @auth-interceptor\");\n\n              if (response.access_token && response.refresh_token && response.access_token_expires && response.refresh_token_expires) {\n                localStorage.setItem('access_token', response.access_token);\n                localStorage.setItem('refresh_token', response.refresh_token);\n                localStorage.setItem('access_token_expires', response.access_token_expires);\n                localStorage.setItem('refresh_token_expires', response.refresh_token_expires);\n              }\n\n              console.warn(\"saved new token @auth-interceptor\");\n              return next.handle(this.updateHeader(req));\n            }));\n          } else {\n            //redirect to login\n            console.warn(\"redirect to login\");\n            this.router.navigate([\"register\"]);\n            throw console.error(\"Refresh token expired\");\n          }\n        } //if user is trying to login/register, let it through\n\n      } else if (req.url === \"http://localhost:8080/api/register\" || req.url === \"http://localhost:8080/api/login\") {\n        return next.handle(req);\n      } else {\n        console.warn(\"redirect to login\");\n        this.router.navigate([\"register\"]);\n        throw console.error(\"Tokens Not found\");\n      }\n    }\n\n    updateHeader(req) {\n      const authToken = localStorage.getItem('access_token');\n      req = req.clone({\n        headers: req.headers.set(\"Authorization\", `Bearer ${authToken}`)\n      });\n      return req;\n    }\n\n  }\n\n  AuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.DatePipe), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}