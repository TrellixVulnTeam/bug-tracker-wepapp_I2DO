import { ɵɵdefineInjectable, Injectable, Component, ElementRef, Directive, Input, HostListener, NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

class AngularNotificationService {
    constructor() { }
    setProperties(prop) {
        this.properties = prop;
    }
    getProperties() {
        return this.properties;
    }
}
AngularNotificationService.ɵprov = ɵɵdefineInjectable({ factory: function AngularNotificationService_Factory() { return new AngularNotificationService(); }, token: AngularNotificationService, providedIn: "root" });
AngularNotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AngularNotificationService.ctorParameters = () => [];

class AngularNotificationComponent {
    constructor() {
        console.log('in lib');
    }
    ngOnInit() {
    }
}
AngularNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-angular-notification',
                template: `
    <p>
      angular-notification works!hhhh
    </p>
  `
            },] }
];
AngularNotificationComponent.ctorParameters = () => [];

class NotwidthDirective {
    constructor(el) {
        this.el = el;
    }
    ngOnInit() {
        this.setUp(this.setting);
    }
    highlight(color) {
        this.el.nativeElement.style.backgroundColor = color;
    }
    setWidth(width) {
        this.el.nativeElement.style.width = width;
    }
    setUp(setting) {
        // width
        this.el.nativeElement.style.width = setting.width;
        // classes
        if (setting.type === 'warn') {
            this.el.nativeElement.classList.add('yellow');
        }
        else if (setting.type === 'danger') {
            this.el.nativeElement.classList.add('red');
        }
        else if (setting.type === 'success') {
            this.el.nativeElement.classList.add('green');
        }
        else {
            this.el.nativeElement.classList.add('default');
        }
        // position
        if (setting.position === 'bottom right') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('bottom-right');
        }
        else if (setting.position === 'top left') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('top-left');
        }
        else if (setting.position === 'bottom left') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('bottom-left');
        }
        else if (setting.position === 'center') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('center');
        }
        else {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('top-right');
        }
        // opacity
        this.el.nativeElement.style.opacity = setting.opacity;
        // background color
        this.el.nativeElement.style.background = setting.background;
        // duration
        if (setting.duration === undefined) {
            this.setDuration(4000);
        }
        else {
            this.setDuration(setting.duration);
        }
    }
    setDuration(time) {
        setTimeout(() => {
            // this.el.nativeElement.style.display = 'none';
            this.el.nativeElement.style.visibility = 'hidden';
            this.el.nativeElement.style.opacity = '0';
        }, time);
    }
    change() {
        console.log(' i see fire');
    }
}
NotwidthDirective.ctorParameters = () => [
    { type: ElementRef }
];
NotwidthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libNotwidth]'
            },] }
];
NotwidthDirective.ctorParameters = () => [
    { type: ElementRef }
];
NotwidthDirective.propDecorators = {
    setting: [{ type: Input }],
    change: [{ type: HostListener, args: ['click',] }]
};

class NotifComponent {
    constructor(Service) {
        this.Service = Service;
        this.open = true;
    }
    ngOnInit() {
        /* this.setting = {
           width: '300px',
           type: 'warn',
           title: 'notification title',
           body: 'this is a message of warning ',
           position: 'bottom right',
           opacity: '1',
           duration: 10000,
           background: 'yellow'
         };*/
        this.setting = this.Service.getProperties();
        console.log('juuuu ', this.setting);
    }
    close() {
        this.open = false;
    }
}
NotifComponent.ctorParameters = () => [
    { type: AngularNotificationService }
];
NotifComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-notif',
                template: "<div *ngIf=\"open\" class=\"notif-container\">\n    <div class=\"notif-box\" libNotwidth  [setting] = setting >\n        <h4 class=\"title\">{{setting.title}}</h4><span class=\"close\" title=\"close\" (click)=\"close()\">\u00D7</span>\n        <div class=\"notif-body\" [innerHTML]=setting.body ></div>\n    </div>\n    <br> \n    <br><br><br><br>\n</div> \n  ",
                styles: [".notif-box{font-family:'Noto Sans SC',sans-serif;padding:10px;box-shadow:0 1px 0 -1px rgb(0 0 0 / 20%),0 1px 14px -2px rgb(0 0 0 / 14%),0 1px 3px 0 rgb(0 0 0 / 12%);border-radius:4px;border:0;width:30%;border-left:6px solid #6772e5;position:absolute;transition:opacity .6s,visibility .6s;margin-top:10px;z-index:10}.title{width:92%;display:inline-block;font-size:16px;margin-top:5px;color:#242832;margin-bottom:10px}.close{cursor:pointer;float:right;margin-right:5px}.notif-body{font-size:14px;color:#97999e}.green{border-left:6px solid #00d563}.red{border-left:6px solid #ef3934}.yellow{border-left:6px solid #ff9500}.default{border-left:6px solid #6772e5}.top-right{top:0;right:15px}.bottom-left{bottom:-30vh;left:15px}.bottom-right{bottom:15px;right:15px}.top-left{top:15px;left:15px}.center{top:50%;left:50%;transform:translate(-50%,-50%)}"]
            },] }
];
NotifComponent.ctorParameters = () => [
    { type: AngularNotificationService }
];

class AngularNotificationModule {
}
AngularNotificationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [AngularNotificationComponent, NotwidthDirective, NotifComponent],
                imports: [
                    BrowserModule
                ],
                exports: [AngularNotificationComponent, NotifComponent]
            },] }
];

/*
 * Public API Surface of angular-notification
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularNotificationComponent, AngularNotificationModule, AngularNotificationService, NotifComponent, NotwidthDirective };
//# sourceMappingURL=angular-notification-alert.js.map
