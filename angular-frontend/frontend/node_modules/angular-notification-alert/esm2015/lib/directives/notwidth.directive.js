import { Directive, ElementRef, HostListener, Input, OnInit, Output, EventEmitter } from '@angular/core';
export class NotwidthDirective {
    constructor(el) {
        this.el = el;
    }
    ngOnInit() {
        this.setUp(this.setting);
    }
    highlight(color) {
        this.el.nativeElement.style.backgroundColor = color;
    }
    setWidth(width) {
        this.el.nativeElement.style.width = width;
    }
    setUp(setting) {
        // width
        this.el.nativeElement.style.width = setting.width;
        // classes
        if (setting.type === 'warn') {
            this.el.nativeElement.classList.add('yellow');
        }
        else if (setting.type === 'danger') {
            this.el.nativeElement.classList.add('red');
        }
        else if (setting.type === 'success') {
            this.el.nativeElement.classList.add('green');
        }
        else {
            this.el.nativeElement.classList.add('default');
        }
        // position
        if (setting.position === 'bottom right') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('bottom-right');
        }
        else if (setting.position === 'top left') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('top-left');
        }
        else if (setting.position === 'bottom left') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('bottom-left');
        }
        else if (setting.position === 'center') {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('center');
        }
        else {
            this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
            this.el.nativeElement.classList.add('top-right');
        }
        // opacity
        this.el.nativeElement.style.opacity = setting.opacity;
        // background color
        this.el.nativeElement.style.background = setting.background;
        // duration
        if (setting.duration === undefined) {
            this.setDuration(4000);
        }
        else {
            this.setDuration(setting.duration);
        }
    }
    setDuration(time) {
        setTimeout(() => {
            // this.el.nativeElement.style.display = 'none';
            this.el.nativeElement.style.visibility = 'hidden';
            this.el.nativeElement.style.opacity = '0';
        }, time);
    }
    change() {
        console.log(' i see fire');
    }
}
NotwidthDirective.ctorParameters = () => [
    { type: ElementRef }
];
NotwidthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libNotwidth]'
            },] }
];
NotwidthDirective.ctorParameters = () => [
    { type: ElementRef }
];
NotwidthDirective.propDecorators = {
    setting: [{ type: Input }],
    change: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90d2lkdGguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmljYXRpb24tYWxlcnQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9ub3R3aWR0aC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRyxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0xRyxNQUFNLE9BQU8saUJBQWlCO0lBRTVCLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQUksQ0FBQztJQU12QyxRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNPLFNBQVMsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ3RELENBQUM7SUFDTyxRQUFRLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBQ08sS0FBSyxDQUFDLE9BQVk7UUFDeEIsUUFBUTtRQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUVsRCxVQUFVO1FBQ1YsSUFBSyxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9DO2FBQU0sSUFBSyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNyQyxJQUFJLENBQUMsRUFB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TUFBTTtRQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQXZFdUIsVUFBVTs7O1lBTG5DLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTthQUMxQjs7O1lBTG1CLFVBQVU7OztzQkFVM0IsS0FBSztxQkFtRUwsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQgLCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NldHRpbmcgfSBmcm9tICcuLi9tb2RlbHMvc2V0dGluJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2xpYk5vdHdpZHRoXSdcbn0pXG5leHBvcnQgY2xhc3MgTm90d2lkdGhEaXJlY3RpdmUgIGltcGxlbWVudHMgT25Jbml0ICB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgQElucHV0KCkgc2V0dGluZzogU2V0dGluZztcbiAgdGl0bGU6IGFueTtcbiAgYm9keTogYW55O1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0VXAodGhpcy5zZXR0aW5nKTtcbiAgfVxuICBwcml2YXRlIGhpZ2hsaWdodChjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICB9XG4gIHByaXZhdGUgc2V0V2lkdGgod2lkdGg6IHN0cmluZykge1xuICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICB9XG4gIHByaXZhdGUgc2V0VXAoc2V0dGluZzogYW55KSB7XG4gICAgLy8gd2lkdGhcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBzZXR0aW5nLndpZHRoO1xuXG4gICAgLy8gY2xhc3Nlc1xuICAgIGlmICggc2V0dGluZy50eXBlID09PSAnd2FybicpIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd5ZWxsb3cnKTtcbiAgICB9IGVsc2UgaWYgKCBzZXR0aW5nLnR5cGUgPT09ICdkYW5nZXInKSB7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncmVkJyk7XG4gICAgfSBlbHNlIGlmICggc2V0dGluZy50eXBlID09PSAnc3VjY2VzcycpIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdncmVlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGVmYXVsdCcpO1xuICAgIH1cblxuICAgIC8vIHBvc2l0aW9uXG4gICAgaWYgKCBzZXR0aW5nLnBvc2l0aW9uID09PSAnYm90dG9tIHJpZ2h0Jykge1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wcmV2aW91c1NpYmxpbmcucmVtb3ZlKCk7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYm90dG9tLXJpZ2h0Jyk7XG4gICAgfSBlbHNlIGlmICggc2V0dGluZy5wb3NpdGlvbiA9PT0gJ3RvcCBsZWZ0Jykge1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wcmV2aW91c1NpYmxpbmcucmVtb3ZlKCk7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndG9wLWxlZnQnKTtcbiAgICB9IGVsc2UgaWYgKCBzZXR0aW5nLnBvc2l0aW9uID09PSAnYm90dG9tIGxlZnQnKSB7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnByZXZpb3VzU2libGluZy5yZW1vdmUoKTtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib3R0b20tbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAoIHNldHRpbmcucG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnByZXZpb3VzU2libGluZy5yZW1vdmUoKTtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjZW50ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wcmV2aW91c1NpYmxpbmcucmVtb3ZlKCk7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndG9wLXJpZ2h0Jyk7XG4gICAgfVxuICAgIC8vIG9wYWNpdHlcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IHNldHRpbmcub3BhY2l0eTtcblxuICAgIC8vIGJhY2tncm91bmQgY29sb3JcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IHNldHRpbmcuYmFja2dyb3VuZDtcblxuICAgIC8vIGR1cmF0aW9uXG4gICAgaWYgKHNldHRpbmcuZHVyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXREdXJhdGlvbig0MDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREdXJhdGlvbihzZXR0aW5nLmR1cmF0aW9uKTtcbiAgICB9XG5cbiAgfVxuICBwcml2YXRlIHNldER1cmF0aW9uKHRpbWU6IG51bWJlcikge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgfSwgdGltZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIGNoYW5nZSgpIHtcbiAgICBjb25zb2xlLmxvZygnIGkgc2VlIGZpcmUnKTtcbiAgfVxufVxuIl19