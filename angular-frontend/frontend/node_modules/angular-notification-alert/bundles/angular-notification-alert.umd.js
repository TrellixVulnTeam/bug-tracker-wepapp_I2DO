(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('angular-notification-alert', ['exports', '@angular/core', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['angular-notification-alert'] = {}, global.ng.core, global.ng.platformBrowser));
}(this, (function (exports, core, platformBrowser) { 'use strict';

    var AngularNotificationService = /** @class */ (function () {
        function AngularNotificationService() {
        }
        AngularNotificationService.prototype.setProperties = function (prop) {
            this.properties = prop;
        };
        AngularNotificationService.prototype.getProperties = function () {
            return this.properties;
        };
        AngularNotificationService.ɵprov = core.ɵɵdefineInjectable({ factory: function AngularNotificationService_Factory() { return new AngularNotificationService(); }, token: AngularNotificationService, providedIn: "root" });
        AngularNotificationService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        AngularNotificationService.ctorParameters = function () { return []; };
        return AngularNotificationService;
    }());

    var AngularNotificationComponent = /** @class */ (function () {
        function AngularNotificationComponent() {
            console.log('in lib');
        }
        AngularNotificationComponent.prototype.ngOnInit = function () {
        };
        AngularNotificationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-angular-notification',
                        template: "\n    <p>\n      angular-notification works!hhhh\n    </p>\n  "
                    },] }
        ];
        AngularNotificationComponent.ctorParameters = function () { return []; };
        return AngularNotificationComponent;
    }());

    var NotwidthDirective = /** @class */ (function () {
        function NotwidthDirective(el) {
            this.el = el;
        }
        NotwidthDirective.prototype.ngOnInit = function () {
            this.setUp(this.setting);
        };
        NotwidthDirective.prototype.highlight = function (color) {
            this.el.nativeElement.style.backgroundColor = color;
        };
        NotwidthDirective.prototype.setWidth = function (width) {
            this.el.nativeElement.style.width = width;
        };
        NotwidthDirective.prototype.setUp = function (setting) {
            // width
            this.el.nativeElement.style.width = setting.width;
            // classes
            if (setting.type === 'warn') {
                this.el.nativeElement.classList.add('yellow');
            }
            else if (setting.type === 'danger') {
                this.el.nativeElement.classList.add('red');
            }
            else if (setting.type === 'success') {
                this.el.nativeElement.classList.add('green');
            }
            else {
                this.el.nativeElement.classList.add('default');
            }
            // position
            if (setting.position === 'bottom right') {
                this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
                this.el.nativeElement.classList.add('bottom-right');
            }
            else if (setting.position === 'top left') {
                this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
                this.el.nativeElement.classList.add('top-left');
            }
            else if (setting.position === 'bottom left') {
                this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
                this.el.nativeElement.classList.add('bottom-left');
            }
            else if (setting.position === 'center') {
                this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
                this.el.nativeElement.classList.add('center');
            }
            else {
                this.el.nativeElement.parentElement.parentElement.previousSibling.remove();
                this.el.nativeElement.classList.add('top-right');
            }
            // opacity
            this.el.nativeElement.style.opacity = setting.opacity;
            // background color
            this.el.nativeElement.style.background = setting.background;
            // duration
            if (setting.duration === undefined) {
                this.setDuration(4000);
            }
            else {
                this.setDuration(setting.duration);
            }
        };
        NotwidthDirective.prototype.setDuration = function (time) {
            var _this = this;
            setTimeout(function () {
                // this.el.nativeElement.style.display = 'none';
                _this.el.nativeElement.style.visibility = 'hidden';
                _this.el.nativeElement.style.opacity = '0';
            }, time);
        };
        NotwidthDirective.prototype.change = function () {
            console.log(' i see fire');
        };
        NotwidthDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        NotwidthDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[libNotwidth]'
                    },] }
        ];
        NotwidthDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        NotwidthDirective.propDecorators = {
            setting: [{ type: core.Input }],
            change: [{ type: core.HostListener, args: ['click',] }]
        };
        return NotwidthDirective;
    }());

    var NotifComponent = /** @class */ (function () {
        function NotifComponent(Service) {
            this.Service = Service;
            this.open = true;
        }
        NotifComponent.prototype.ngOnInit = function () {
            /* this.setting = {
               width: '300px',
               type: 'warn',
               title: 'notification title',
               body: 'this is a message of warning ',
               position: 'bottom right',
               opacity: '1',
               duration: 10000,
               background: 'yellow'
             };*/
            this.setting = this.Service.getProperties();
            console.log('juuuu ', this.setting);
        };
        NotifComponent.prototype.close = function () {
            this.open = false;
        };
        NotifComponent.ctorParameters = function () { return [
            { type: AngularNotificationService }
        ]; };
        NotifComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-notif',
                        template: "<div *ngIf=\"open\" class=\"notif-container\">\n    <div class=\"notif-box\" libNotwidth  [setting] = setting >\n        <h4 class=\"title\">{{setting.title}}</h4><span class=\"close\" title=\"close\" (click)=\"close()\">\u00D7</span>\n        <div class=\"notif-body\" [innerHTML]=setting.body ></div>\n    </div>\n    <br> \n    <br><br><br><br>\n</div> \n  ",
                        styles: [".notif-box{font-family:'Noto Sans SC',sans-serif;padding:10px;box-shadow:0 1px 0 -1px rgb(0 0 0 / 20%),0 1px 14px -2px rgb(0 0 0 / 14%),0 1px 3px 0 rgb(0 0 0 / 12%);border-radius:4px;border:0;width:30%;border-left:6px solid #6772e5;position:absolute;transition:opacity .6s,visibility .6s;margin-top:10px;z-index:10}.title{width:92%;display:inline-block;font-size:16px;margin-top:5px;color:#242832;margin-bottom:10px}.close{cursor:pointer;float:right;margin-right:5px}.notif-body{font-size:14px;color:#97999e}.green{border-left:6px solid #00d563}.red{border-left:6px solid #ef3934}.yellow{border-left:6px solid #ff9500}.default{border-left:6px solid #6772e5}.top-right{top:0;right:15px}.bottom-left{bottom:-30vh;left:15px}.bottom-right{bottom:15px;right:15px}.top-left{top:15px;left:15px}.center{top:50%;left:50%;transform:translate(-50%,-50%)}"]
                    },] }
        ];
        NotifComponent.ctorParameters = function () { return [
            { type: AngularNotificationService }
        ]; };
        return NotifComponent;
    }());

    var AngularNotificationModule = /** @class */ (function () {
        function AngularNotificationModule() {
        }
        AngularNotificationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [AngularNotificationComponent, NotwidthDirective, NotifComponent],
                        imports: [
                            platformBrowser.BrowserModule
                        ],
                        exports: [AngularNotificationComponent, NotifComponent]
                    },] }
        ];
        return AngularNotificationModule;
    }());

    exports.AngularNotificationComponent = AngularNotificationComponent;
    exports.AngularNotificationModule = AngularNotificationModule;
    exports.AngularNotificationService = AngularNotificationService;
    exports.NotifComponent = NotifComponent;
    exports.NotwidthDirective = NotwidthDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-notification-alert.umd.js.map
